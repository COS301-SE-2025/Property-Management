--setting up dependencies to inventoryitem :
ALTER TABLE inventoryusage ADD COLUMN IF NOT EXISTS item_uuid UUID;
UPDATE inventoryusage u
SET item_uuid = i.item_uuid
FROM inventoryitem i
WHERE u.item_id = i.item_id;

ALTER TABLE inventoryusage DROP CONSTRAINT IF EXISTS inventoryusage_item_uuid_fkey;
ALTER TABLE inventoryusage
ADD CONSTRAINT inventoryusage_item_uuid_fkey
FOREIGN KEY (item_uuid)
REFERENCES inventoryitem(item_uuid);
ALTER TABLE inventoryusage DROP CONSTRAINT IF EXISTS inventoryusage_item_id_fkey;
ALTER TABLE inventoryusage DROP COLUMN IF EXISTS item_id;


--InventoryItemTable
ALTER TABLE inventoryitem DROP CONSTRAINT IF EXISTS inventoryitem_pkey;
ALTER TABLE inventoryitem DROP COLUMN IF EXISTS item_id;
ALTER TABLE inventoryitem ADD CONSTRAINT inventoryitem_pkey PRIMARY KEY (item_uuid);
DROP SEQUENCE IF EXISTS inventoryitem_item_id_seq;

--InventoryUsageTable
ALTER TABLE inventoryusage ADD COLUMN IF NOT EXISTS task_uuid UUID;
UPDATE inventoryusage u
SET task_uuid = mt.task_uuid
FROM maintenancetask mt
WHERE u.task_id = mt.task_id;

ALTER TABLE inventoryusage
ADD CONSTRAINT inventoryusage_task_uuid_fkey
FOREIGN KEY (task_uuid)
REFERENCES maintenancetask(task_uuid);

ALTER Table inventoryusage
DROP CONSTRAINT IF EXISTS inventoryusage_pkey;

ALTER TABLE inventoryusage
ADD CONSTRAINT inventoryusage_pkey PRIMARY KEY (usage_uuid);

ALTER TABLE inventoryusage
DROP COLUMN IF EXISTS usage_id;

ALTER TABLE inventoryusage
DROP COLUMN IF EXISTS item_id;

ALTER TABLE inventoryusage
DROP CONSTRAINT inventoryusage_task_id_fkey;

ALTER TABLE inventoryusage
DROP COLUMN task_id;

ALTER TABLE inventoryusage ADD COLUMN IF NOT EXISTS used_by_contractor_uuid UUID;
UPDATE inventoryusage u
SET used_by_contractor_uuid = c.contractor_uuid
FROM contractor c
WHERE u.used_by_contractor_id = c.contractor_id;

ALTER TABLE inventoryusage DROP CONSTRAINT IF EXISTS inventoryusage_used_by_contractor_uuid_fkey;
ALTER table inventoryusage
ADD CONSTRAINT inventoryusage_used_by_contractor_uuid_fkey
FOREIGN KEY (used_by_contractor_uuid)
REFERENCES contractor(contractor_uuid);

ALTER TABLE inventoryusage DROP CONSTRAINT IF EXISTS inventoryusage_used_by_contractor_id_fkey;
ALTER TABLE inventoryusage DROP COLUMN IF NOT EXISTS used_by_contractor_id;

--maintebnancetask
-- ALTER TABLE maintenancetask ADD COLUMN building_uuid UUID;
-- ALTER TABLE maintenancetask ADD COLUMN created_by_uuid UUID;

-- -- 2. Backfill UUID columns from referenced tables
-- UPDATE maintenancetask mt
-- SET building_uuid = b.building_uuid
-- FROM building b
-- WHERE mt.building_id = b.building_id;

-- UPDATE maintenancetask mt
-- SET created_by_uuid = t.trustee_uuid
-- FROM trustee t
-- WHERE mt.created_by = t.trustee_id;

-- -- 3. Drop old foreign key constraints
-- ALTER TABLE maintenancetask DROP COLUMN task_id;
-- ALTER TABLE maintenancetask DROP CONSTRAINT maintenancetask_building_id_fkey;
-- ALTER TABLE maintenancetask DROP CONSTRAINT maintenancetask_created_by_fkey;

-- -- 4. Drop old primary key constraint on task_id
-- ALTER TABLE maintenancetask DROP CONSTRAINT maintenancetask_pkey;

-- -- 5. Set task_uuid as the new primary key
-- ALTER TABLE maintenancetask ADD PRIMARY KEY (task_uuid);

-- -- 6. Drop old integer ID columns
-- ALTER TABLE maintenancetask DROP COLUMN building_id;
-- ALTER TABLE maintenancetask DROP COLUMN created_by;

-- -- 7. Add new foreign key constraints on UUID columns
-- ALTER TABLE maintenancetask
--   ADD CONSTRAINT maintenancetask_building_uuid_fkey FOREIGN KEY (building_uuid)
--   REFERENCES building(building_uuid);

-- ALTER TABLE maintenancetask
--   ADD CONSTRAINT maintenancetask_created_by_uuid_fkey FOREIGN KEY (created_by_uuid)
--   REFERENCES trustee(trustee_uuid);

--building id removal :
-- Budget table
UPDATE budget
SET building_uuid_fk = b.building_uuid
FROM building b
WHERE budget.building_id = b.building_id;

-- Trustee table
UPDATE trustee
SET building_uuid = b.building_uuid
FROM building b
WHERE trustee.building_id = b.building_id;

-- TenYearPlan table
UPDATE tenyearplan
SET building_uuid = b.building_uuid
FROM building b
WHERE tenyearplan.building_id = b.building_id;

--drop old foreign keys and columns :
-- Budget
ALTER TABLE budget DROP CONSTRAINT IF EXISTS budget_building_id_fkey;
ALTER TABLE budget DROP COLUMN IF EXISTS building_id;

-- Trustee
ALTER TABLE trustee DROP CONSTRAINT IF EXISTS trustee_building_id_fkey;
ALTER TABLE trustee DROP COLUMN IF EXISTS building_id;

-- TenYearPlan
ALTER TABLE tenyearplan DROP CONSTRAINT IF EXISTS tenyearplan_building_id_fkey;
ALTER TABLE tenyearplan DROP COLUMN IF EXISTS building_id;

-- ensure forein key constraints on new UUID columns
-- Budget
ALTER TABLE budget DROP CONSTRAINT IF EXISTS budget_building_uuid_fkey;
ALTER TABLE budget
    ADD CONSTRAINT budget_building_uuid_fkey FOREIGN KEY (building_uuid_fk) REFERENCES building(building_uuid);

-- Trustee
ALTER TABLE trustee DROP CONSTRAINT IF EXISTS trustee_building_uuid_fkey;
ALTER TABLE trustee
    ADD CONSTRAINT trustee_building_uuid_fkey FOREIGN KEY (building_uuid) REFERENCES building(building_uuid);

-- TenYearPlan
ALTER TABLE tenyearplan DROP CONSTRAINT IF EXISTS tenyearplan_building_uuid_fkey;
ALTER TABLE tenyearplan
    ADD CONSTRAINT tenyearplan_building_uuid_fkey FOREIGN KEY (building_uuid) REFERENCES building(building_uuid);

ALTER TABLE building DROP CONSTRAINT IF EXISTS building_pkey;
ALTER TABLE building ADD CONSTRAINT building_pkey PRIMARY KEY (building_uuid);

ALTER TABLE building ADD COLUMN IF NOT EXISTS trustee_uuid UUID;

-- Add foreign key constraint y
ALTER TABLE building DROP CONSTRAINT IF EXISTS building_trustee_uuid_fkey;
ALTER TABLE building ADD CONSTRAINT building_trustee_uuid_fkey 
FOREIGN KEY (trustee_uuid) REFERENCES trustee(trustee_uuid);

--Add cascading :
-- Step 1: Drop the old constraint
ALTER TABLE budget DROP CONSTRAINT IF EXISTS budget_building_uuid_fkey;

-- Step 2: Add new constraint with ON DELETE CASCADE
ALTER TABLE budget
ADD CONSTRAINT budget_building_uuid_fkey
FOREIGN KEY (building_uuid_fk)
REFERENCES building(building_uuid)
ON DELETE CASCADE;
